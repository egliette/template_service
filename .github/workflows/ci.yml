name: CI Pipeline

on:
  push:
    branches-ignore:
      - develop
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: "3.10"
  # Logging
  SERVICE_NAME:
  LOG_DIR: logs
  LOG_TO_STDOUT: "true"
  LOG_LEVEL: INFO
  LOG_MAX_DAYS: "33"
  # Container user mapping
  APP_UID: "1000"
  APP_GID: "1000"
  # Docker network
  DOCKER_NETWORK_NAME:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
        pip install black isort

    - name: Check import sorting with isort
      run: |
        isort --profile=black --check-only --diff app/

    - name: Check code formatting with Black
      run: |
        black --check --diff app/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      run: |
        docker compose -f docker-compose.test.yml build app_test

    - name: Create network
      run: |
        docker network create ${{ env.DOCKER_NETWORK_NAME }} || true

    - name: Run tests
      run: |
        docker compose -f docker-compose.test.yml up --exit-code-from app_test app_test

    - name: Cleanup
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v
        docker network rm ${{ env.DOCKER_NETWORK_NAME }} || true
